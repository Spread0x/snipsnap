name: snipsnap-templates-frontend

on:
  push:
    branches: [master]
    paths:
      - templates/frontend/**

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: ./templates/frontend/
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: "./templates/frontend/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('./templates/frontend/package-lock.json') }}
      - name: NPM Install
        run: npm install
        working-directory: ${{env.WORKING_DIRECTORY}}
      - name: ESLint and stylelint
        run: npm run lint
        working-directory: ${{env.WORKING_DIRECTORY}}

  build:
    runs-on: ubuntu-latest
    needs: lint
    env:
      WORKING_DIRECTORY: ./templates/frontend/
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: NPM Install
        run: npm ci
        working-directory: ${{env.WORKING_DIRECTORY}}
      - name: Build frontend
        env:
          SENTRY_ENABLED: true
          SENTRY_ENVIRONMENT: production
          SENTRY_URL: https://sentry.io/
          SENTRY_ORG: ${{ secrets.SENTRY_ORG}}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT}}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN}}
          NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN}}
          NEXT_PUBLIC_SITE_URL: https://templates.snipsnap.dev
          NEXT_PUBLIC_GRAPHQL_URL: https://hasura-t.snipsnap.dev/v1/graphql
        run: npm run build
        working-directory: ${{env.WORKING_DIRECTORY}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Pixel Point Container Registry
        uses: docker/login-action@v1
        with:
          registry: https://registry.pixelpoint.io
          username: ${{ secrets.DOCKER_USERNAME}}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./templates/frontend
          file: ./templates/frontend/Dockerfile.prod
          push: true
          tags: registry.pixelpoint.io/snipsnap-templates-frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      KUBERNETES_URL: ${{ secrets.KUBERNETES_URL }}
      KUBERNETES_TOKEN: ${{ secrets.KUBERNETES_TOKEN }}
    steps:
      - name: Pull deployment plugin
        run: docker pull peloton/drone-k8s-deployment
      # TODO: wrap Drone plugin as a Github action, have not found any available solutions
      # in the marketplace that could just redeploy
      - name: Deploy
        run: |
          docker run --rm -e PLUGIN_URL=$KUBERNETES_URL -e PLUGIN_TOKEN=$KUBERNETES_TOKEN -e PLUGIN_DEPLOYMENT_NAMES=templates-frontend -e PLUGIN_CONTAINER_NAMES=templates-frontend -e PLUGIN_NAMESPACES=snipsnap -e PLUGIN_DOCKER_IMAGE=registry.pixelpoint.io/snipsnap-templates-frontend:latest -e PLUGIN_DATE_LABEL=deployment.github/date-deployed peloton/drone-k8s-deployment
