name: snipsnap-templates-graphql

on:
  push:
    branches: [master]
    paths:
      - templates/hasura/**
      - templates/graphql/**

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Pixel Point Container Registry
        uses: docker/login-action@v1
        with:
          registry: https://registry.pixelpoint.io
          username: ${{ secrets.DOCKER_USERNAME}}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./templates/graphql
          file: ./templates/graphql/Dockerfile.prod
          push: true
          tags: registry.pixelpoint.io/snipsnap-templates-graphql:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      KUBERNETES_URL: ${{ secrets.KUBERNETES_URL }}
      KUBERNETES_TOKEN: ${{ secrets.KUBERNETES_TOKEN }}
    steps:
      - name: Pull deployment plugin
        run: docker pull peloton/drone-k8s-deployment
      # TODO: wrap Drone plugin as a Github action, have not found any available solutions
      # in the marketplace that could just redeploy
      - name: Deploy
        run: |
          docker run --rm -e PLUGIN_URL=$KUBERNETES_URL -e PLUGIN_TOKEN=$KUBERNETES_TOKEN -e PLUGIN_DEPLOYMENT_NAMES=templates-graphql -e PLUGIN_CONTAINER_NAMES=templates-graphql -e PLUGIN_NAMESPACES=snipsnap -e PLUGIN_DOCKER_IMAGE=registry.pixelpoint.io/snipsnap-templates-graphql:latest -e PLUGIN_DATE_LABEL=deployment.github/date-deployed peloton/drone-k8s-deployment

  update-database:
    runs-on: ubuntu-latest
    needs: deploy
    env:
      WORKING_DIRECTORY: ./templates/hasura/
      HASURA_GRAPHQL_ADMIN_SECRET: ${{ secrets.HASURA_GRAPHQL_ADMIN_SECRET }}
      HASURA_GRAPHQL_ENDPOINT: ${{ secrets.HASURA_GRAPHQL_ENDPOINT }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Hasura CLI
        run: sudo npm install -g hasura-cli@v2.0.0-alpha.10 --unsafe-perm=true
      - name: Apply migrations
        run: hasura migrate apply
        working-directory: ${{env.WORKING_DIRECTORY}}
      - name: Apply metadata
        run: hasura metadata apply
        working-directory: ${{env.WORKING_DIRECTORY}}
