{
  "framer-import": {
    "prefix": ["framer-motion import"],
    "body": ["import { motion } from 'framer-motion'"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "framer-motion": {
    "prefix": ["framer-motion motion", "motion"],
    "body": [
      "<motion.${1:div}",
      "  initial=\"${2:hidden}\"",
      "  animate=\"${3:visible}\"",
      "></motion.${1:div}>"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "framer-variants": {
    "prefix": ["framer-motion variants", "variants"],
    "body": [
      "const ${1:variants} = {",
      "  ${2:hidden}: {",
      "    ${3:style}",
      "  },",
      "  ${4:visible}: {",
      "    ${5:style}",
      "  },",
      "};"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "framer-sequence": {
    "prefix": ["framer-motion sequence", "sequence"],
    "body": [
      "const ${1:sequence} = async () => {",
      "  await ${2:animateControls}.start({ ${5:opacity: 1} })",
      "}"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "sequence for animation controls"
  },
  "framer-use-animation": {
    "prefix": ["framer-motion use-animation", "use-animation"],
    "body": ["const ${controls} = useAnimation()"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "useAnimation()\nuseAnimation hook can be used to create a set of imperative AnimationControls with a start and stop method."
  },
  "framer-animation-controls": {
    "prefix": ["framer-motion controls", "controls"],
    "body": ["${1:controls}.start({ ${2:opacity: 1} })"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "AnimationControls with a start and stop method"
  },
  "framer-use-motion-value": {
    "prefix": ["framer-motion use-motion-value", "use-motion-value"],
    "body": ["const ${1:scale} = useMotionValue(${2:1})"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "useMotionValue()\nCreates a MotionValue to track the state and velocity of a value."
  },
  "framer-use-transform": {
    "prefix": ["framer-motion use-transform", "use-transform"],
    "body": ["const ${1:y} = useTransform(${2:x}, ${3:value => value * 2})"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "useTransform()\nCreate a MotionValue that transforms the output of another MotionValue through a function."
  },
  "framer-use-spring": {
    "prefix": ["framer-motion use-spring", "use-spring"],
    "body": ["const ${1:x} = useSpring(${2:0}, { ${3:stiffness}: ${4:300} })"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "useSpring()\nCreates a MotionValue that, when set, will use a spring animation to animate to its new state."
  },
  "framer-use-element-scroll": {
    "prefix": ["framer-motion use-element-scroll", "use-element-scroll"],
    "body": ["const { ${1:scrollYProgress} } = useElementScroll(${2:ref})"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "useElementScroll(ref): Returns MotionValues that update when the provided element scrolls."
  },
  "framer-use-viewport-scroll": {
    "prefix": ["framer-motion use-viewport-scroll", "use-viewport-scroll"],
    "body": ["const { ${scrollYProgress} } = useViewportScroll()"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "useViewportScroll(): ScrollMotionValues Returns MotionValues that update when the viewport scrolls."
  },
  "framer-use-inverted-scale": {
    "prefix": ["framer-motion use-inverted-scale", "use-inverted-scale"],
    "body": ["const { ${1:scaleX}, ${2:scaleY} } = useInvertedScale()"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "useInvertedScale(scale): ScaleMotionValues Returns a MotionValue each for scaleX and scaleY that update with the inverse of their respective parent scales."
  },
  "framer-use-cycle": {
    "prefix": ["framer-motion use-cycle", "use-cycle"],
    "body": [
      "const [${1:x}, ${2:cycleX}] = useCycle(${3:0}, ${4:50}, ${5:100})"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "useCycle(items): CycleState It works similar to useState in React. It is provided an initial array of possible states, and returns an array of two arguments."
  },
  "framer-use-reduce-motion": {
    "prefix": ["framer-motion use-reduce-motion", "use-reduce-motion"],
    "body": ["const ${shouldReduceMotion} = useReducedMotion()"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "A hook that returns true if we should be using reduced motion based on the current device's Reduced Motion setting."
  },
  "framer-use-presence": {
    "prefix": ["framer-motion use-presence", "use-presence"],
    "body": ["const [${1:isPresent}, ${2:safeToRemove}] = usePresence()"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "usePresence()\nIf isPresent is false, it means that a component has been removed the tree, but AnimatePresence won't really remove it until safeToRemove has been called."
  },
  "framer-use-drag-controls": {
    "prefix": ["framer-motion use-drag-controls", "use-drag-controls"],
    "body": ["const ${dragControls} = useDragControls()"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "useDragControls()\nBy creating a dragControls using the useDragControls hook, we can pass this into the draggable component's dragControls prop."
  },
  "framer-animate-presence-import": {
    "prefix": ["framer-motion import animate-presence", "animate-presence"],
    "body": ["import { motion, AnimatePresence } from \"framer-motion\""],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "framer-animate-presence": {
    "prefix": ["framer-motion animate-presence", "animate-presence"],
    "body": [
      "<AnimatePresence>",
      "    {${1:isVisible} && (",
      "      <motion.div",
      "        initial={{ ${3:style} }}",
      "        animate={{ ${4:style} }}",
      "        exit={{ ${5:style} }}",
      "      />",
      "    )}",
      "</AnimatePresence>"
    ],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "AnimatePresence allows components to animate out when they're removed from the React tree."
  },
  "framer-import-animate-shared-layout": {
    "prefix": [
      "framer-motion import animate-shared-layout",
      "animate-presence"
    ],
    "body": ["import { motion, AnimateSharedLayout } from \"framer-motion\""],
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "framer-animate-shared-layout": {
    "prefix": ["framer-motion animate-shared-layout", "animate-shared-layout"],
    "body": ["<AnimateSharedLayout>", "</AnimateSharedLayout>"],
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "description": "Animate between different components that share a layout ID"
  }
}
